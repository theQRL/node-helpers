{"version":3,"sources":["../src/index.js"],"names":["require","grpc","protoLoader","CryptoJS","promisify","QRLPROTO_SHA256","tmp","fs","util","readFile","writeFile","PROTO_PATH","__dirname","includes","GOOGLE_PATH","qrlClient","clientGetNodeInfo","client","Promise","resolve","reject","getNodeInfo","error","response","console","log","checkProtoHash","file","then","contents","protoFileWordArray","lib","WordArray","create","toString","calculatedProtoHash","SHA256","enc","Hex","verified","forEach","value","protoHash","loadGrpcBaseProto","grpcEndpoint","load","packageDefinition","loadPackageDefinition","packageObject","qrl","Base","credentials","createInsecure","res","qrlProtoFilePath","fileSync","mode","prefix","postfix","name","grpcProto","fsErr","loadGrpcProto","protofile","endpoint","options","keepCase","longs","String","enums","defaults","oneofs","includeDirs","grpcObject","grpcObjectString","JSON","stringify","protoObjectWordArray","calculatedObjectHash","objectHash","PublicAPI","makeClient","proto","validHash","QrlNode","ipAddress","port","version","connection","Error","apiCall","path","substr","request","module","exports"],"mappings":"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","sourcesContent":["require('@babel/polyfill')\nconst grpc = require('@grpc/grpc-js')\nconst protoLoader = require('@grpc/proto-loader')\nconst CryptoJS = require('crypto-js')\nconst { promisify } = require('util')\nconst { QRLPROTO_SHA256 } = require('@theqrl/qrl-proto-sha256')\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst util = require('util')\nconst readFile = util.promisify(fs.readFile)\nconst writeFile = util.promisify(fs.writeFile)\nlet PROTO_PATH = __dirname + '/../node_modules/@theqrl/qrlbase.proto/qrlbase.proto'\nif (__dirname.includes('/node_modules/')) {\n  PROTO_PATH = __dirname + '/../../qrlbase.proto/qrlbase.proto'\n}\nlet GOOGLE_PATH = __dirname + '/../node_modules/google-proto-files/'\nif (__dirname.includes('/node_modules/')) {\n  GOOGLE_PATH = __dirname + '/../../../google-proto-files/'\n}\nlet qrlClient = null\n\nfunction clientGetNodeInfo (client) {\n  try {\n    return new Promise((resolve, reject) => {\n      client.getNodeInfo({}, (error, response) => {\n        if (error) {\n          reject(error)\n        }\n        resolve(response)\n      })\n    })\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nfunction checkProtoHash(file) {\n  return readFile(file).then(contents => {\n    // console.log(contents)\n    const protoFileWordArray = CryptoJS.lib.WordArray.create(contents.toString())\n    const calculatedProtoHash = CryptoJS.SHA256(protoFileWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.protoHash) {\n        if (value.protoHash === calculatedProtoHash) {\n          verified = true\n        }\n      }\n    })\n    return verified\n  })\n}\n\nfunction loadGrpcBaseProto(grpcEndpoint) {\n    return protoLoader.load(PROTO_PATH, {}).then(async packageDefinition => {\n      try {\n        const packageObject = await grpc.loadPackageDefinition(packageDefinition)\n        const client = await new packageObject.qrl.Base(grpcEndpoint, grpc.credentials.createInsecure())\n        // console.log(client)\n        const res = await clientGetNodeInfo(client)\n        const qrlProtoFilePath = tmp.fileSync({\n          mode: '0644',\n          prefix: 'qrl-',\n          postfix: '.proto'\n        }).name\n        writeFile(qrlProtoFilePath, res.grpcProto).then(fsErr => {\n          if (fsErr) {\n            console.log('tmp filesystem error')\n          }\n        })\n        return(qrlProtoFilePath)\n      } catch (error) {\n        console.log('Unable to load grpc base proto (' + error + ')')\n      }\n    })\n}\n\nasync function loadGrpcProto(protofile, endpoint) {\n    const options = {\n      keepCase: true,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs: [GOOGLE_PATH],\n    }\n    const packageDefinition = await protoLoader.load(protofile, options)\n    const grpcObject = grpc.loadPackageDefinition(packageDefinition)\n    const grpcObjectString = JSON.stringify(grpcObject.qrl)\n    const protoObjectWordArray = CryptoJS.lib.WordArray.create(grpcObjectString)\n    const calculatedObjectHash = CryptoJS.SHA256(protoObjectWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.objectHash) {\n        if (value.objectHash === calculatedObjectHash) {\n          verified = true\n        }\n      }\n    })\n    // If the grpc object shasum matches, establish the grpc connection.\n    if (verified) {\n      return new grpcObject.qrl.PublicAPI(\n        endpoint,\n        grpc.credentials.createInsecure()\n      )\n    }\n}\n\nasync function makeClient(grpcEndpoint) {\n    const proto = await loadGrpcBaseProto(grpcEndpoint)\n    if (proto) {\n      let validHash = await checkProtoHash(proto)\n      if (validHash) {\n        const client = await loadGrpcProto(proto, grpcEndpoint)\n        return client\n      }\n    }\n    return null\n}\n\n\nclass QrlNode {\n  constructor(ipAddress, port) {\n    this.version = '0.6.0'\n    this.connection = false\n    this.client = null\n    this.ipAddress = ipAddress\n    this.port = port\n  }\n\n  async connect() {\n    if (this.connection === false) {\n      const client = await makeClient(`${this.ipAddress}:${this.port}`)\n      if (client === null) {\n        this.connection = false\n      } else {\n        this.connection = true\n      }\n      this.client = client\n      return client\n    }\n    throw new Error('Already connected')\n  }\n\n  disconnect() {\n    this.client = null\n    this.connection = false\n  }\n\n  async validApi(apiCall) {\n    try {\n      const client = await this.client\n      if (client[apiCall].path.substr(0, 5) === '/qrl.') {\n        return true\n      }\n      return false\n    } catch (error) {\n      return false\n    }\n  }\n\n  async api(apiCall, request = {}) {\n    try {\n      return new Promise(async (resolve, reject) => {\n        const client = await this.client\n        client[apiCall](request, async (error, response) => {\n          if (error) {\n            reject(error)\n          }\n          resolve(response)\n        })\n      })\n    } catch (error) {\n      console.log('Unable to make API call (' + error + ')')\n    }\n  }\n}\n\nmodule.exports = QrlNode"],"file":"index.js"}