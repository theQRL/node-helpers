{"version":3,"file":"index.js","names":["require","grpc","protoLoader","CryptoJS","promisify","QRLPROTO_SHA256","tmp","fs","util","readFile","writeFile","PROTO_PATH","__dirname","includes","GOOGLE_PATH","qrlClient","clientGetNodeInfo","client","Promise","resolve","reject","getNodeInfo","error","response","console","log","checkProtoHash","file","then","contents","protoFileWordArray","lib","WordArray","create","toString","calculatedProtoHash","SHA256","enc","Hex","verified","forEach","value","protoHash","loadGrpcBaseProto","grpcEndpoint","load","packageDefinition","loadPackageDefinition","packageObject","qrl","Base","credentials","createInsecure","res","qrlProtoFilePath","fileSync","mode","prefix","postfix","name","grpcProto","fsErr","loadGrpcProto","protofile","endpoint","options","keepCase","longs","String","enums","defaults","oneofs","includeDirs","grpcObject","grpcObjectString","JSON","stringify","protoObjectWordArray","calculatedObjectHash","objectHash","PublicAPI","makeClient","proto","validHash","QrlNode","ipAddress","port","version","connection","Error","apiCall","path","substr","request","module","exports"],"sources":["../src/index.js"],"sourcesContent":["require('@babel/polyfill')\nconst grpc = require('@grpc/grpc-js')\nconst protoLoader = require('@grpc/proto-loader')\nconst CryptoJS = require('crypto-js')\nconst { promisify } = require('util')\nconst { QRLPROTO_SHA256 } = require('@theqrl/qrl-proto-sha256')\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst util = require('util')\nconst readFile = util.promisify(fs.readFile)\nconst writeFile = util.promisify(fs.writeFile)\nlet PROTO_PATH = __dirname + '/../node_modules/@theqrl/qrlbase.proto/qrlbase.proto'\nif (__dirname.includes('/node_modules/')) {\n  PROTO_PATH = __dirname + '/../../qrlbase.proto/qrlbase.proto'\n}\nlet GOOGLE_PATH = __dirname + '/../node_modules/google-proto-files/'\nif (__dirname.includes('/node_modules/')) {\n  GOOGLE_PATH = __dirname + '/../../../google-proto-files/'\n}\nlet qrlClient = null\n\nfunction clientGetNodeInfo (client) {\n  try {\n    return new Promise((resolve, reject) => {\n      client.getNodeInfo({}, (error, response) => {\n        if (error) {\n          reject(error)\n        }\n        resolve(response)\n      })\n    })\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nfunction checkProtoHash(file) {\n  return readFile(file).then(contents => {\n    // console.log(contents)\n    const protoFileWordArray = CryptoJS.lib.WordArray.create(contents.toString())\n    const calculatedProtoHash = CryptoJS.SHA256(protoFileWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.protoHash) {\n        if (value.protoHash === calculatedProtoHash) {\n          verified = true\n        }\n      }\n    })\n    return verified\n  })\n}\n\nfunction loadGrpcBaseProto(grpcEndpoint) {\n    return protoLoader.load(PROTO_PATH, {}).then(async packageDefinition => {\n      try {\n        const packageObject = await grpc.loadPackageDefinition(packageDefinition)\n        const client = await new packageObject.qrl.Base(grpcEndpoint, grpc.credentials.createInsecure())\n        // console.log(client)\n        const res = await clientGetNodeInfo(client)\n        const qrlProtoFilePath = tmp.fileSync({\n          mode: '0644',\n          prefix: 'qrl-',\n          postfix: '.proto'\n        }).name\n        writeFile(qrlProtoFilePath, res.grpcProto).then(fsErr => {\n          if (fsErr) { console.log('tmp filesystem error') }\n        })\n        return(qrlProtoFilePath)\n      } catch (error) {\n        console.log('Unable to load grpc base proto (' + error + ')')\n      }\n    })\n}\n\nasync function loadGrpcProto(protofile, endpoint) {\n    const options = {\n      keepCase: true,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs: [GOOGLE_PATH],\n    }\n    const packageDefinition = await protoLoader.load(protofile, options)\n    const grpcObject = grpc.loadPackageDefinition(packageDefinition)\n    const grpcObjectString = JSON.stringify(grpcObject.qrl)\n    const protoObjectWordArray = CryptoJS.lib.WordArray.create(grpcObjectString)\n    const calculatedObjectHash = CryptoJS.SHA256(protoObjectWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.objectHash) {\n        if (value.objectHash === calculatedObjectHash) {\n          verified = true\n        }\n      }\n    })\n    // If the grpc object shasum matches, establish the grpc connection.\n    if (verified) {\n      return new grpcObject.qrl.PublicAPI(\n        endpoint,\n        grpc.credentials.createInsecure()\n      )\n    }\n}\n\nasync function makeClient(grpcEndpoint) {\n    const proto = await loadGrpcBaseProto(grpcEndpoint)\n    if (proto) {\n      let validHash = await checkProtoHash(proto)\n      if (validHash) {\n        const client = await loadGrpcProto(proto, grpcEndpoint)\n        return client\n      }\n    }\n    return null\n}\n\n\nclass QrlNode {\n  constructor(ipAddress, port) {\n    this.version = '0.7.2'\n    this.connection = false\n    this.client = null\n    this.ipAddress = ipAddress\n    this.port = port\n  }\n\n  async connect() {\n    if (this.connection === false) {\n      const client = await makeClient(`${this.ipAddress}:${this.port}`)\n      if (client === null) {\n        this.connection = false\n      } else {\n        this.connection = true\n      }\n      this.client = client\n      return client\n    }\n    throw new Error('Already connected')\n  }\n\n  disconnect() {\n    this.client = null\n    this.connection = false\n  }\n\n  async validApi(apiCall) {\n    try {\n      const client = await this.client\n      if (client[apiCall].path.substr(0, 5) === '/qrl.') { return true }\n      return false\n    } catch (error) {\n      return false\n    }\n  }\n\n  async api(apiCall, request = {}) {\n    try {\n      return new Promise(async (resolve, reject) => {\n        const client = await this.client\n        client[apiCall](request, async (error, response) => {\n          if (error) {\n            reject(error)\n          }\n          resolve(response)\n        })\n      })\n    } catch (error) {\n      console.log('Unable to make API call (' + error + ')')\n    }\n  }\n}\n\nmodule.exports = QrlNode"],"mappings":"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"}