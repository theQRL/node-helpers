{"version":3,"file":"index.js","names":["require","grpc","protoLoader","CryptoJS","promisify","QRLPROTO_SHA256","tmp","fs","util","readFile","writeFile","PROTO_PATH","__dirname","includes","GOOGLE_PATH","qrlClient","clientGetNodeInfo","client","Promise","resolve","reject","getNodeInfo","error","response","console","log","checkProtoHash","file","then","contents","protoFileWordArray","lib","WordArray","create","toString","calculatedProtoHash","SHA256","enc","Hex","verified","forEach","value","protoHash","loadGrpcBaseProto","grpcEndpoint","load","packageDefinition","loadPackageDefinition","packageObject","qrl","Base","credentials","createInsecure","res","qrlProtoFilePath","fileSync","mode","prefix","postfix","name","grpcProto","fsErr","loadGrpcProto","protofile","endpoint","options","keepCase","longs","String","enums","defaults","oneofs","includeDirs","grpcObject","grpcObjectString","JSON","stringify","protoObjectWordArray","calculatedObjectHash","objectHash","PublicAPI","makeClient","proto","validHash","QrlNode","ipAddress","port","version","connection","Error","apiCall","path","substr","request","module","exports"],"sources":["../src/index.js"],"sourcesContent":["require('@babel/polyfill')\nconst grpc = require('@grpc/grpc-js')\nconst protoLoader = require('@grpc/proto-loader')\nconst CryptoJS = require('crypto-js')\nconst { promisify } = require('util')\nconst { QRLPROTO_SHA256 } = require('@theqrl/qrl-proto-sha256')\nconst tmp = require('tmp')\nconst fs = require('fs')\nconst util = require('util')\nconst readFile = util.promisify(fs.readFile)\nconst writeFile = util.promisify(fs.writeFile)\nlet PROTO_PATH = __dirname + '/../node_modules/@theqrl/qrlbase.proto/qrlbase.proto'\nif (__dirname.includes('/node_modules/')) {\n  PROTO_PATH = __dirname + '/../../qrlbase.proto/qrlbase.proto'\n}\nlet GOOGLE_PATH = __dirname + '/../node_modules/google-proto-files/'\nif (__dirname.includes('/node_modules/')) {\n  GOOGLE_PATH = __dirname + '/../../../google-proto-files/'\n}\nlet qrlClient = null\n\nfunction clientGetNodeInfo (client) {\n  try {\n    return new Promise((resolve, reject) => {\n      client.getNodeInfo({}, (error, response) => {\n        if (error) {\n          reject(error)\n        }\n        resolve(response)\n      })\n    })\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nfunction checkProtoHash(file) {\n  return readFile(file).then(contents => {\n    // console.log(contents)\n    const protoFileWordArray = CryptoJS.lib.WordArray.create(contents.toString())\n    const calculatedProtoHash = CryptoJS.SHA256(protoFileWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.protoHash) {\n        if (value.protoHash === calculatedProtoHash) {\n          verified = true\n        }\n      }\n    })\n    return verified\n  })\n}\n\nfunction loadGrpcBaseProto(grpcEndpoint) {\n    return protoLoader.load(PROTO_PATH, {}).then(async packageDefinition => {\n      try {\n        const packageObject = await grpc.loadPackageDefinition(packageDefinition)\n        const client = await new packageObject.qrl.Base(grpcEndpoint, grpc.credentials.createInsecure())\n        // console.log(client)\n        const res = await clientGetNodeInfo(client)\n        const qrlProtoFilePath = tmp.fileSync({\n          mode: '0644',\n          prefix: 'qrl-',\n          postfix: '.proto'\n        }).name\n        writeFile(qrlProtoFilePath, res.grpcProto).then(fsErr => {\n          if (fsErr) { console.log('tmp filesystem error')}\n        })\n        return(qrlProtoFilePath)\n      } catch (error) {\n        console.log('Unable to load grpc base proto (' + error + ')')\n      }\n    })\n}\n\nasync function loadGrpcProto(protofile, endpoint) {\n    const options = {\n      keepCase: true,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs: [GOOGLE_PATH],\n    }\n    const packageDefinition = await protoLoader.load(protofile, options)\n    const grpcObject = grpc.loadPackageDefinition(packageDefinition)\n    const grpcObjectString = JSON.stringify(grpcObject.qrl)\n    const protoObjectWordArray = CryptoJS.lib.WordArray.create(grpcObjectString)\n    const calculatedObjectHash = CryptoJS.SHA256(protoObjectWordArray).toString(CryptoJS.enc.Hex)\n    let verified = false\n    QRLPROTO_SHA256.forEach(value => {\n      if (value.objectHash) {\n        if (value.objectHash === calculatedObjectHash) {\n          verified = true\n        }\n      }\n    })\n    // If the grpc object shasum matches, establish the grpc connection.\n    if (verified) {\n      return new grpcObject.qrl.PublicAPI(\n        endpoint,\n        grpc.credentials.createInsecure()\n      )\n    }\n}\n\nasync function makeClient(grpcEndpoint) {\n    const proto = await loadGrpcBaseProto(grpcEndpoint)\n    if (proto) {\n      let validHash = await checkProtoHash(proto)\n      if (validHash) {\n        const client = await loadGrpcProto(proto, grpcEndpoint)\n        return client\n      }\n    }\n    return null\n}\n\n\nclass QrlNode {\n  constructor(ipAddress, port) {\n    this.version = '0.7.1'\n    this.connection = false\n    this.client = null\n    this.ipAddress = ipAddress\n    this.port = port\n  }\n\n  async connect() {\n    if (this.connection === false) {\n      const client = await makeClient(`${this.ipAddress}:${this.port}`)\n      if (client === null) {\n        this.connection = false\n      } else {\n        this.connection = true\n      }\n      this.client = client\n      return client\n    }\n    throw new Error('Already connected')\n  }\n\n  disconnect() {\n    this.client = null\n    this.connection = false\n  }\n\n  async validApi(apiCall) {\n    try {\n      const client = await this.client\n      if (client[apiCall].path.substr(0, 5) === '/qrl.') { return true }\n      return false\n    } catch (error) {\n      return false\n    }\n  }\n\n  async api(apiCall, request = {}) {\n    try {\n      return new Promise(async (resolve, reject) => {\n        const client = await this.client\n        client[apiCall](request, async (error, response) => {\n          if (error) {\n            reject(error)\n          }\n          resolve(response)\n        })\n      })\n    } catch (error) {\n      console.log('Unable to make API call (' + error + ')')\n    }\n  }\n}\n\nmodule.exports = QrlNode"],"mappings":"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"}